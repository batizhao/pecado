package ${package}.unit.service;

import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import ${package}.domain.${className};
import ${package}.mapper.${className}Mapper;
import ${package}.service.${className}Service;
import ${package}.service.impl.${className}ServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Bean;

import java.util.ArrayList;
import java.util.List;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.*;

/**
 * ${comments}
 *
 * @author ${author}
 * @since ${date}
 */
public class ${className}ServiceUnitTest extends BaseServiceUnitTest {

    /**
     * Spring Boot 提供了 @TestConfiguration 注释，可用于 src/test/java 中的类，以指示不应通过扫描获取它们。
     */
    @TestConfiguration
    static class TestContextConfiguration {
        @Bean
        public ${className}Service ${classname}Service() {
            return new ${className}ServiceImpl();
        }
    }

    @MockBean
    private ${className}Mapper ${classname}Mapper;

    @Autowired
    private ${className}Service ${classname}Service;

    private List<${className}> ${classname}List;
    private IPage<${className}> ${classname}PageList;

    /**
     * Prepare test data.
     */
    @BeforeEach
    public void setUp() {
        ${classname}List = new ArrayList<>();
        ${classname}List.add(new ${className}().setId(1L).setUsername("zhangsan"));
        ${classname}List.add(new ${className}().setId(2L).setUsername("lisi"));
        ${classname}List.add(new ${className}().setId(3L).setUsername("wangwu"));

        ${classname}PageList = new Page<>();
        ${classname}PageList.setRecords(${classname}List);
    }

    @Test
    public void givenNothing_whenFindAll${className}_thenSuccess() {
        when(${classname}Mapper.select${className}Page(any(Page.class), any(${className}.class)))
                .thenReturn(${classname}PageList);

        IPage<${className}> ${classname}s = ${classname}Service.find${className}s(new Page<>(), new ${className}());

        assertThat(${classname}s.getRecords(), iterableWithSize(3));
        assertThat(${classname}s.getRecords(), hasItems(hasProperty("username", equalTo("zhangsan")),
                hasProperty("username", equalTo("lisi")),
                hasProperty("username", equalTo("wangwu"))));
    }

    @Test
    public void given${className}Id_whenFind${className}_thenSuccess() {
        when(${classname}Mapper.selectById(1L))
                .thenReturn(${classname}List.get(0));

        ${className} ${classname} = ${classname}Service.findById(1L);

        assertThat(${classname}.getUsername(), equalTo("zhangsan"));
    }

    @Test
    public void given${className}Json_whenSaveOrUpdate${className}_thenSuccess() {
        ${className} ${classname}_test_data = new ${className}().setUsername("zhaoliu");

        // insert 不带 id
        doReturn(1).when(${classname}Mapper).insert(any(${className}.class));

        ${className} ${classname} = ${classname}Service.saveOrUpdate${className}(${classname}_test_data);

        verify(${classname}Mapper).insert(any(${className}.class));

        // update 需要带 id
        doReturn(1).when(${classname}Mapper).updateById(any(${className}.class));

        ${classname} = ${classname}Service.saveOrUpdate${className}(${classname}List.get(0));

        verify(${classname}Mapper).updateById(any(${className}.class));
    }


}