package ${package}.controller;

import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.extern.slf4j.Slf4j;
import me.batizhao.common.core.util.ResponseInfo;
import ${package}.domain.${className};
import ${package}.service.${className}Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.Min;
import java.util.List;

/**
 * ${comments}
 *
 * @module pecado-ims
 *
 * @author ${author}
 * @since ${date}
 */
@Api(tags = "${comments}管理")
@RestController
@Slf4j
@Validated
public class ${className}Controller {

    @Autowired
    private ${className}Service ${classname}Service;

    /**
     * 分页查询
     * @param page 分页对象
     * @param ${classname} ${comments}
     * @return ResponseInfo
     */
    @ApiOperation(value = "分页查询")
    @GetMapping("/${pathName}s")
    public ResponseInfo<IPage<${className}>> handle${className}s(Page<${className}> page, ${className} ${classname}) {
        return ResponseInfo.ok(${classname}Service.find${className}s(page, ${classname}));
    }


    /**
     * 通过id查询${comments}
     * @param ${pk.lowerAttrName} id
     * @return ResponseInfo
     */
    @ApiOperation(value = "通过id查询")
    @GetMapping("/${pathName}/{${pk.lowerAttrName}}")
    public ResponseInfo<${className}> handleId(@ApiParam(value = "ID" , required = true) @PathVariable("${pk.lowerAttrName}") @Min(1) ${pk.attrType} ${pk.lowerAttrName}) {
        return ResponseInfo.ok(${classname}Service.findById(${pk.lowerAttrName}));
    }

    /**
     * 添加或修改${comments}
     * @param ${classname} ${comments}
     * @return ResponseInfo
     */
    @ApiOperation(value = "添加或修改${comments}")
    @PostMapping("/${pathName}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseInfo<${className}> handleSaveOrUpdate(@Valid @ApiParam(value = "${comments}" , required = true) @RequestBody ${className} ${classname}) {
        return ResponseInfo.ok(${classname}Service.saveOrUpdate${className}(${classname}));
    }

    /**
     * 通过id删除${comments}
     * @param ids ID串
     * @return ResponseInfo
     */
    @ApiOperation(value = "通过id删除${comments}")
    @DeleteMapping("/${pathName}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseInfo<Boolean> handleDelete(@ApiParam(value = "ID串" , required = true) @RequestParam List<Long> ids) {
        return ResponseInfo.ok(${classname}Service.removeByIds(ids));
    }

}
